version: "3.9"

services:
  react-app:
    build:
      context: ./app/
      dockerfile: Dockerfile.dev # Assuming you saved above as Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./app:/app # Mount current dir to container for live reload
      - /app/node_modules # Prevent overwrite of node_modules inside container
    environment:
      - CHOKIDAR_USEPOLLING=true # Use polling for watching changes, good for Docker on some OS
  backend:
    build:
      context: ./backend/
      dockerfile: Dockerfile.dev # Assuming you saved above as Dockerfile.dev
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/backend # Mount current dir to container for live reload
      - /backend/node_modules # Prevent overwrite of node_modules inside container
    environment:
      - CHOKIDAR_USEPOLLING=true # Use polling for watching changes, good for Docker on some OS
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=church_library
    depends_on:
      db:
        condition: service_healthy # Wait for db to be healthy before starting backend
  db:
    image: postgres:16
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "myuser"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: church_library
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

volumes:
  db_data:
